1. free_env dans init.c
Ajoutez cette fonction pour libérer l'environnement env.

c
Copy code
void free_env(t_env *env) {
    if (!env) return;

    if (env->win_ptr) {
        mlx_destroy_window(env->mlx_ptr, env->win_ptr);
    }

    free(env);
}
2. Utilisation de free_env et free_image_data
Dans votre fonction principale main dans main.c, 
assurez-vous de libérer l'environnement env et les données d'image img avant de quitter le programme, que ce soit après une exécution réussie ou en cas d'erreur.

À la fin de main (avant de quitter normalement) :
c
Copy code
free_image_data(draw_datas.img, env);
free_env(env);
return 0;
En cas d'erreur après l'initialisation de env :
c
Copy code
free_env(env);
return -1; // ou exit(EXIT_FAILURE);
En cas d'erreur après l'initialisation de map :
c
Copy code
free_map(map);
free_env(env);
return -1; // ou exit(EXIT_FAILURE);
3. free_map, free_array, et free_tokens
Assurez-vous que ces fonctions sont appelées au bon moment pour libérer la mémoire associée.

free_map doit être appelée :
Après avoir utilisé map et avant de terminer le programme.
En cas d'erreur après avoir alloué map.
free_array doit être appelée :
Après avoir fini d'utiliser array et avant de terminer le programme.
En cas d'erreur après avoir alloué array.
free_tokens doit être appelée :
Immédiatement après avoir fini d'utiliser tokens, 
typiquement après avoir traité une ligne du fichier de la carte.
4. free_env dans key_hook
Dans votre fonction key_hook dans start.c, 
assurez-vous de libérer env avant de quitter le programme lorsque l'utilisateur appuie sur la touche d'échappement.

c
Copy code
int key_hook(int keycode, t_env *env) {
    if (keycode == 65307) { // Touche d'échappement
        free_env(env);
        exit(0);
    }
    return (0);
}
Ces corrections devraient assurer une gestion propre de la mémoire dans votre projet. Appliquez ces modifications à chaque fichier concerné, en respectant les contextes d'utilisation et de libération des ressources.